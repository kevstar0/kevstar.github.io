/**
 * Node Web Thing server implementation.
 */
/// <reference types="node" />
import * as dnssd from 'dnssd';
import express = require('express');
import expressWs = require('express-ws');
import * as http from 'http';
import * as https from 'https';
import Thing = require('./thing');
/**
 * A container for a single thing.
 */
export declare class SingleThing {
    private thing;
    /**
     * Initialize the container.
     *
     * @param {Object} thing The thing to store
     */
    constructor(thing: Thing);
    /**
     * Get the thing at the given index.
     */
    getThing(): Thing;
    /**
     * Get the list of things.
     */
    getThings(): Thing[];
    /**
     * Get the mDNS server name.
     */
    getName(): string;
}
/**
 * A container for multiple things.
 */
export declare class MultipleThings {
    private things;
    private name;
    /**
     * Initialize the container.
     *
     * @param {Object} things The things to store
     * @param {String} name The mDNS server name
     */
    constructor(things: Thing[], name: string);
    /**
     * Get the thing at the given index.
     *
     * @param {Number|String} idx The index
     */
    getThing(idx?: number | string): Thing | null;
    /**
     * Get the list of things.
     */
    getThings(): Thing[];
    /**
     * Get the mDNS server name.
     */
    getName(): string;
}
/**
 * Server to represent a Web Thing over HTTP.
 */
export declare class WebThingServer {
    things: SingleThing | MultipleThings;
    name: string;
    port: number;
    hostname: string | null;
    basePath: string;
    disableHostValidation: boolean;
    hosts: string[];
    app: express.Express & {
        isTls?: boolean;
    };
    server: http.Server | https.Server;
    router: expressWs.Router;
    mdns: dnssd.Advertisement;
    /**
     * Initialize the WebThingServer.
     *
     * For documentation on the additional route handlers, see:
     * http://expressjs.com/en/4x/api.html#app.use
     *
     * @param {Object} things Things managed by this server -- should be of type
     *                        SingleThing or MultipleThings
     * @param {Number} port Port to listen on (defaults to 80)
     * @param {String} hostname Optional host name, i.e. mything.com
     * @param {Object} sslOptions SSL options to pass to the express server
     * @param {Object[]} additionalRoutes List of additional routes to add to
     *                                    server, i.e. [{path: '..', handler: ..}]
     * @param {String} basePath Base URL path to use, rather than '/'
     * @param {Boolean} disableHostValidation Whether or not to disable host
     *                                        validation -- note that this can
     *                                        lead to DNS rebinding attacks
     */
    constructor(things: SingleThing | MultipleThings, port?: number | null, hostname?: string | null, sslOptions?: https.ServerOptions | null, additionalRoutes?: any[] | null, basePath?: string, disableHostValidation?: boolean);
    /**
     * Start listening for incoming connections.
     *
     * @returns {Promise} Promise which resolves once the server is started.
     */
    start(): Promise<void>;
    /**
     * Stop listening.
     *
     * @param {boolean?} force - Whether or not to force shutdown immediately.
     * @returns {Promise} Promise which resolves once the server is stopped.
     */
    stop(force?: boolean): Promise<unknown>;
}
