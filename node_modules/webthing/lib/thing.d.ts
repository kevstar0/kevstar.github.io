/**
 * High-level Thing base class implementation.
 */
import Property = require('./property');
import Event = require('./event');
import Action = require('./action');
import { Link, Subscriber } from './types';
/**
 * A Web Thing.
 */
declare class Thing {
    private id;
    private title;
    private type;
    private context;
    private description;
    private properties;
    private availableActions;
    private availableEvents;
    private actions;
    private events;
    private subscribers;
    private hrefPrefix;
    private uiHref;
    /**
     * Initialize the object.
     *
     * @param {String} id The thing's unique ID - must be a URI
     * @param {String} title The thing's title
     * @param {String} type (Optional) The thing's type(s)
     * @param {String} description (Optional) Description of the thing
     */
    constructor(id: string, title: string, type: string | string[], description: string);
    /**
     * Return the thing state as a Thing Description.
     *
     * @returns {Object} Current thing state
     */
    asThingDescription(): Thing.ThingDescription;
    /**
     * Get this thing's href.
     *
     * @returns {String} The href.
     */
    getHref(): string;
    /**
     * Get this thing's UI href.
     *
     * @returns {String|null} The href.
     */
    getUiHref(): string | null;
    /**
     * Set the prefix of any hrefs associated with this thing.
     *
     * @param {String} prefix The prefix
     */
    setHrefPrefix(prefix: string): void;
    /**
     * Set the href of this thing's custom UI.
     *
     * @param {String} href The href
     */
    setUiHref(href: string): void;
    /**
     * Get the ID of the thing.
     *
     * @returns {String} The ID.
     */
    getId(): string;
    /**
     * Get the title of the thing.
     *
     * @returns {String} The title.
     */
    getTitle(): string;
    /**
     * Get the type context of the thing.
     *
     * @returns {String} The context.
     */
    getContext(): string;
    /**
     * Get the type(s) of the thing.
     *
     * @returns {String[]} The type(s).
     */
    getType(): string[];
    /**
     * Get the description of the thing.
     *
     * @returns {String} The description.
     */
    getDescription(): string;
    /**
     * Get the thing's properties as an object.
     *
     * @returns {Object} Properties, i.e. name -> description
     */
    getPropertyDescriptions(): {
        [name: string]: Property.PropertyDescription;
    };
    /**
     * Get the thing's actions as an array.
     *
     * @param {String?} actionName Optional action name to get descriptions for
     *
     * @returns {Object} Action descriptions.
     */
    getActionDescriptions(actionName?: string | null): Action.ActionDescription[];
    /**
     * Get the thing's events as an array.
     *
     * @param {String?} eventName Optional event name to get descriptions for
     *
     * @returns {Object} Event descriptions.
     */
    getEventDescriptions(eventName?: string | null): Event.EventDescription[];
    /**
     * Add a property to this thing.
     *
     * @param {Object} property Property to add
     */
    addProperty(property: Property): void;
    /**
     * Remove a property from this thing.
     *
     * @param {Object} property Property to remove
     */
    removeProperty(property: Property): void;
    /**
     * Find a property by name.
     *
     * @param {String} propertyName Name of the property to find
     *
     * @returns {(Object|null)} Property if found, else null
     */
    findProperty(propertyName: string): Property | null;
    /**
     * Get a property's value.
     *
     * @param {String} propertyName Name of the property to get the value of
     *
     * @returns {*} Current property value if found, else null
     */
    getProperty(propertyName: string): any | null;
    /**
     * Get a mapping of all properties and their values.
     *
     * Returns an object of propertyName -> value.
     */
    getProperties(): {
        [propertyName: string]: any;
    };
    /**
     * Determine whether or not this thing has a given property.
     *
     * @param {String} propertyName The property to look for
     *
     * @returns {Boolean} Indication of property presence
     */
    hasProperty(propertyName: string): boolean;
    /**
     * Set a property value.
     *
     * @param {String} propertyName Name of the property to set
     * @param {*} value Value to set
     */
    setProperty(propertyName: string, value: any): void;
    /**
     * Get an action.
     *
     * @param {String} actionName Name of the action
     * @param {String} actionId ID of the action
     * @returns {Object} The requested action if found, else null
     */
    getAction(actionName: string, actionId: string): Action | null;
    /**
     * Add a new event and notify subscribers.
     *
     * @param {Object} event The event that occurred
     */
    addEvent(event: Event): void;
    /**
     * Add an available event.
     *
     * @param {String} name Name of the event
     * @param {Object} metadata Event metadata, i.e. type, description, etc., as
     *                          an object.
     */
    addAvailableEvent(name: string, metadata: Event.EventMetadata): void;
    /**
     * Perform an action on the thing.
     *
     * @param {String} actionName Name of the action
     * @param {Object} input Any action inputs
     * @returns {Object} The action that was created.
     */
    performAction<InputType = any>(actionName: string, input: InputType | null): Action<InputType> | undefined;
    /**
     * Remove an existing action.
     *
     * @param {String} actionName Name of the action
     * @param {String} actionId ID of the action
     * @returns boolean indicating the presence of the action.
     */
    removeAction(actionName: string, actionId: string): boolean;
    /**
     * Add an available action.
     *
     * @param {String} name Name of the action
     * @param {Object} metadata Action metadata, i.e. type, description, etc., as
     *                          an object.
     * @param {Object} cls Class to instantiate for this action
     */
    addAvailableAction(name: string, metadata: Action.ActionMetadata | null, cls: Action.ActionTypeClass): void;
    /**
     * Add a new websocket subscriber.
     *
     * @param {Object} ws The websocket
     */
    addSubscriber(ws: Subscriber): void;
    /**
     * Remove a websocket subscriber.
     *
     */
    removeSubscriber(ws: Subscriber): void;
    /**
     * Add a new websocket subscriber to an event.
     *
     * @param {String} name Name of the event
     * @param {Subscriber} ws The websocket
     */
    addEventSubscriber(name: string, ws: Subscriber): void;
    /**
     * Remove a websocket subscriber from an event.
     *
     * @param {String} name Name of the event
     * @param {Object} ws The websocket
     */
    removeEventSubscriber(name: string, ws: Subscriber): void;
    /**
     * Notify all subscribers of a property change.
     *
     * @param {Object} property The property that changed
     */
    propertyNotify(property: Property): void;
    /**
     * Notify all subscribers of an action status change.
     *
     * @param {Object} action The action whose status changed
     */
    actionNotify(action: Action): void;
    /**
     * Notify all subscribers of an event.
     *
     * @param {Object} event The event that occurred
     */
    eventNotify(event: Event): void;
}
declare namespace Thing {
    interface SecurityScheme {
        '@type'?: string | string[];
        scheme: string;
        description?: string;
        descriptions?: {
            [lang: string]: string;
        };
        proxy?: string;
    }
    interface ThingDescription {
        id: string;
        title: string;
        name: string;
        href: string;
        '@context': string;
        '@type': string[];
        properties: {
            [name: string]: Property.PropertyDescription;
        };
        links: Link[];
        actions: {
            [name: string]: Action.ActionMetadata;
        };
        events: {
            [name: string]: Event.EventMetadata;
        };
        description?: string;
        base?: string;
        securityDefinitions?: {
            [security: string]: SecurityScheme;
        };
        security?: string;
    }
}
export = Thing;
