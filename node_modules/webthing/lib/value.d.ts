/**
 * An observable, settable value interface.
 */
/// <reference types="node" />
import { EventEmitter } from 'events';
/**
 * A property value.
 *
 * This is used for communicating between the Thing representation and the
 * actual physical thing implementation.
 *
 * Notifies all observers when the underlying value changes through an external
 * update (command to turn the light off) or if the underlying sensor reports a
 * new value.
 */
declare class Value<ValueType = any> extends EventEmitter {
    private lastValue;
    private valueForwarder;
    /**
     * Initialize the object.
     *
     * @param {*} initialValue The initial value
     * @param {function?} valueForwarder The method that updates the actual value
     *                                   on the thing
     */
    constructor(initialValue: ValueType, valueForwarder?: Value.Forwarder<ValueType> | null);
    /**
     * Set a new value for this thing.
     *
     * @param {*} value Value to set
     */
    set(value: ValueType): void;
    /**
     * Return the last known value from the underlying thing.
     *
     * @returns the value.
     */
    get(): ValueType;
    /**
     * Notify observers of a new value.
     *
     * @param {*} value New value
     */
    notifyOfExternalUpdate(value: ValueType): void;
}
declare namespace Value {
    type Forwarder<T> = (value: T) => void;
}
export = Value;
