/**
 * High-level Event base class implementation.
 */
import Thing = require('./thing');
import { PrimitiveJsonType, Link } from './types';
/**
 * An Event represents an individual event from a thing.
 */
declare class Event<Data = any> {
    private thing;
    private name;
    private data;
    private time;
    /**
     * Initialize the object.
     *
     * @param {Object} thing Thing this event belongs to
     * @param {String} name Name of the event
     * @param {*} data (Optional) Data associated with the event
     */
    constructor(thing: Thing, name: string, data?: Data);
    /**
     * Get the event description.
     *
     * @returns {Object} Description of the event as an object.
     */
    asEventDescription(): Event.EventDescription;
    /**
     * Get the thing associated with this event.
     *
     * @returns {Object} The thing.
     */
    getThing(): Thing;
    /**
     * Get the event's name.
     *
     * @returns {String} The name.
     */
    getName(): string;
    /**
     * Get the event's data.
     *
     * @returns {*} The data.
     */
    getData(): Data | null;
    /**
     * Get the event's timestamp.
     *
     * @returns {String} The time.
     */
    getTime(): string;
}
declare namespace Event {
    interface EventDescription {
        [name: string]: {
            timestamp: string;
            data?: any;
        };
    }
    interface EventMetadata {
        type?: PrimitiveJsonType;
        '@type'?: string;
        unit?: string;
        title?: string;
        description?: string;
        links?: Link[];
        minimum?: number;
        maximum?: number;
        multipleOf?: number;
        enum?: readonly string[] | readonly number[];
    }
}
export = Event;
