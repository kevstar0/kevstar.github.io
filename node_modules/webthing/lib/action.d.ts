/**
 * High-level Action base class implementation.
 */
import { Link, PrimitiveJsonType } from './types';
import Thing = require('./thing');
/**
 * An Action represents an individual action on a thing.
 */
declare class Action<InputType = any> {
    private id;
    private thing;
    private name;
    private input;
    private hrefPrefix;
    private href;
    private status;
    private timeRequested;
    private timeCompleted;
    constructor(id: string, thing: Thing, name: string, input: InputType);
    /**
     * Get the action description.
     *
     * @returns {Object} Description of the action as an object.
     */
    asActionDescription(): Action.ActionDescription;
    /**
     * Set the prefix of any hrefs associated with this action.
     *
     * @param {String} prefix The prefix
     */
    setHrefPrefix(prefix: string): void;
    /**
     * Get this action's ID.
     *
     * @returns {String} The ID.
     */
    getId(): string;
    /**
     * Get this action's name.
     *
     * @returns {String} The name.
     */
    getName(): string;
    /**
     * Get this action's href.
     *
     * @returns {String} The href.
     */
    getHref(): string;
    /**
     * Get this action's status.
     *
     * @returns {String} The status.
     */
    getStatus(): string;
    /**
     * Get the thing associated with this action.
     *
     * @returns {Object} The thing.
     */
    getThing(): Thing;
    /**
     * Get the time the action was requested.
     *
     * @returns {String} The time.
     */
    getTimeRequested(): string;
    /**
     * Get the time the action was completed.
     *
     * @returns {String} The time.
     */
    getTimeCompleted(): string | null;
    /**
     * Get the inputs for this action.
     *
     * @returns {Object} The inputs.
     */
    getInput(): InputType;
    /**
     * Start performing the action.
     */
    start(): void;
    /**
     * Override this with the code necessary to perform the action.
     *
     * @returns {Object} Promise that resolves when the action is finished.
     */
    performAction(): Promise<void>;
    /**
     * Override this with the code necessary to cancel the action.
     *
     * @returns {Object} Promise that resolves when the action is cancelled.
     */
    cancel(): Promise<void>;
    /**
     * Finish performing the action.
     */
    finish(): void;
}
declare namespace Action {
    interface ActionMetadata {
        title?: string;
        description?: string;
        links?: Link[];
        input?: {
            type?: PrimitiveJsonType;
            minimum?: number;
            maximum?: number;
            multipleOf?: number;
            enum?: readonly string[] | readonly number[];
        };
    }
    interface ActionDescription<InputType = any> {
        [name: string]: {
            href: string;
            timeRequested: string;
            status: string;
            input?: InputType;
            timeCompleted?: string;
        };
    }
    interface ActionTypeClass<InputType = any> {
        new (thing: Thing, input: InputType): Action<InputType>;
    }
}
export = Action;
